import rclpy
from rclpy.node import Node
from robot_interfaces.srv import Action
import speech_recognition as sr
import urllib.request
import time

class VelocityClient(Node):
    def __init__(self):
        super().__init__('velocity_client')
        self.client = self.create_client(Action, 'set_velocity')

        while not self.client.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('Waiting for service to be available...')
        
    def send_request(self, vx, vy, vz, rx, ry, rz, duration):
        request = Action.Request()
        request.linear_x = vx
        request.linear_y = vy
        request.linear_z = vz
        request.angular_x = rx
        request.angular_y = ry
        request.angular_z = rz

        end_time = time.time() + duration
        while time.time() < end_time:
            future = self.client.call_async(request)
            rclpy.spin_until_future_complete(self, future)
            if future.result() and future.result().success:
                self.get_logger().info("Command sent successfully.")
            else:
                self.get_logger().error("Failed to send command.")
            
            time.sleep(0.1)  # Add a short delay between requests to avoid overloading the service

def main(args=None):
    rclpy.init(args=args)
    client = VelocityClient()
    vx = vt = vz = rx = ry = 0
    rz = 0.2
    is_rotate = false
    #only need to set duration

    try:
        proxy = urllib.request.ProxyHandler({
            'http': "127.0.0.1:7897",
            'https': "127.0.0.1:7897"
        })
        opener = urllib.request.build_opener(proxy)
        urllib.request.install_opener(opener)
        recognizer = sr.Recognizer()

        while true:
            with sr.Microphone() as source:
                print("请说话：")
                audio_data = recognizer.listen(source)
                print("录音结束")

            try:
                text = recognizer.recognize_google(audio_data, language="zh-CN")
            except sr.UnknownValueError:
                print("无法识别音频")

            except sr.RequestError as e:
                print("请求错误；{0}".format(e))


    except KeyboardInterrupt:
        pass

    client.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()