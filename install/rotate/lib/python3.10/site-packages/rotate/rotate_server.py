import rclpy
from rclpy.node import Node
from robot_interfaces.srv import Action  # Change to your package name
from geometry_msgs.msg import Twist
import time

class VelocityService(Node):
    def __init__(self):
        super().__init__('velocity_service')
        self.publisher_ = self.create_publisher(Twist, '/vel_cmd', 10)
        self.service = self.create_service(Action, 'set_velocity', self.set_velocity_callback)
        self.is_processing = False  # Flag to lock service during active duration

    def set_velocity_callback(self, request, response):
        # Check if the service is currently processing a request
        if self.is_processing:
            self.get_logger().warn("Service is busy. Rejecting new request.")
            response.success = False  # Indicate failure due to busy status
            return response

        # Lock the service by setting the flag
        self.is_processing = True
        self.get_logger().info("Service is now processing a request.")

        # Create the Twist message based on client parameters
        twist_msg = Twist()
        twist_msg.linear.x = request.linear_x
        twist_msg.linear.y = request.linear_y
        twist_msg.linear.z = request.linear_z
        twist_msg.angular.x = request.angular_x
        twist_msg.angular.y = request.angular_y
        twist_msg.angular.z = request.angular_z

        # Calculate the end time based on the requested duration
        end_time = time.time() + request.duration

        # Continuously publish the Twist message until the duration has elapsed
        while time.time() < end_time:
            self.publisher_.publish(twist_msg)
            self.get_logger().info(f"Publishing")
            time.sleep(0.1)  # Publish at intervals (e.g., 10 times per second)

        # Unlock the service and indicate success
        self.is_processing = False
        self.get_logger().info("Finished sending Twist commands. Service is now available for new requests.")
        response.success = True
        return response

def main(args=None):
    rclpy.init(args=args)
    node = VelocityService()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass

    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()